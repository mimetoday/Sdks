package Utils;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.StringRequestEntity;

import com.google.gson.Gson;

import DataContracts.OperationMessage;
import DataContracts.ProcessAuthenticationIn;
import DataContracts.ProcessAuthenticationOut;

public class HttpPost {
	
	public static ProcessAuthenticationOut send(String url, ProcessAuthenticationIn req){
		ProcessAuthenticationOut result = new ProcessAuthenticationOut();
		
		try {
			Gson g = new Gson();
			HttpClient client = new HttpClient();
            PostMethod post = new PostMethod(url);
        	post.addRequestHeader("content-type", "application/json");
        	post.addRequestHeader("data-type", "json");
        	
        	String requestString = g.toJson(req);
        	
        	StringRequestEntity requestEntity = new StringRequestEntity(
        			requestString,
        		    "application/json",
        		    "UTF-8");
        	post.setRequestEntity(requestEntity);
        	
            int statusCode = client.executeMethod(post);
            if (statusCode != -1) {
            	String response = post.getResponseBodyAsString(); 
            	result = g.fromJson(response, ProcessAuthenticationOut.class);
            	return result;
            }
            result.OperationMessage = new OperationMessage("", "Internal error");
        } 
        catch (Exception e) {
        	result = new ProcessAuthenticationOut();
            result.OperationMessage = new OperationMessage(e.toString(), "Internal error");
        }
		return null;
	}
	
	
	public static ProcessAuthenticationOut sendHttpsPost(String url, ProcessAuthenticationIn req) {
		ProcessAuthenticationOut result = new ProcessAuthenticationOut();
		try {
		    // Create a trust manager that does not validate certificate chains
		    final TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
		        @Override
		        public void checkClientTrusted( final X509Certificate[] chain, final String authType ) {
		        }
		        @Override
		        public void checkServerTrusted( final X509Certificate[] chain, final String authType ) {
		        }
		        @Override
		        public X509Certificate[] getAcceptedIssuers() {
		            return null;
		        }
	    	}};
		    javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier(
		    	    new javax.net.ssl.HostnameVerifier(){
		    	 
		    	        public boolean verify(String hostname,
		    	                javax.net.ssl.SSLSession sslSession) {
		    	            if (hostname.equals("localhost")) {
		    	                return true;
		    	            }
		    	            return false;
		    	        }
		    	    });
		    
		    SSLContext sc = SSLContext.getInstance("SSL");
		    sc.init(null, trustAllCerts, new java.security.SecureRandom());
		    HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

		    Gson g = new Gson();
		    URL urlRequest = new URL(url);
		    HttpURLConnection conn = (HttpURLConnection) urlRequest.openConnection();
		    conn.setRequestMethod("POST");
		    conn.setRequestProperty("Content-Type", "application/json");
		    conn.setRequestProperty("data-type", "json");
            conn.setDoOutput(true);
		     
            DataOutputStream wr = new DataOutputStream(conn.getOutputStream());
            String requestString = g.toJson(req);
            wr.write(requestString.getBytes());
 
            wr.flush();
            wr.close();
            
            int responseCode = conn.getResponseCode();
            if (responseCode == 200) {
            	BufferedReader in = new BufferedReader(
                        new InputStreamReader(conn.getInputStream()));
                String inputLine;
                StringBuffer response = new StringBuffer();
     
                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
            	result = g.fromJson(responseString, ProcessAuthenticationOut.class);
            	return result;
            }
          
            result.OperationMessage = new OperationMessage("", "Internal error");
		    
		    return result;
		    
		} catch ( final Exception e ) {
			result = new ProcessAuthenticationOut();
            result.OperationMessage = new OperationMessage(e.toString(), "Internal error");
		}
		return null;
		

	}
} 
